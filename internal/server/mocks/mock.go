// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_server is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuoter is a mock of Quoter interface.
type MockQuoter struct {
	ctrl     *gomock.Controller
	recorder *MockQuoterMockRecorder
}

// MockQuoterMockRecorder is the mock recorder for MockQuoter.
type MockQuoterMockRecorder struct {
	mock *MockQuoter
}

// NewMockQuoter creates a new mock instance.
func NewMockQuoter(ctrl *gomock.Controller) *MockQuoter {
	mock := &MockQuoter{ctrl: ctrl}
	mock.recorder = &MockQuoterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoter) EXPECT() *MockQuoterMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuoter) GetRandomQuote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoterMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoter)(nil).GetRandomQuote))
}

// MockProofOfWorkManager is a mock of ProofOfWorkManager interface.
type MockProofOfWorkManager struct {
	ctrl     *gomock.Controller
	recorder *MockProofOfWorkManagerMockRecorder
}

// MockProofOfWorkManagerMockRecorder is the mock recorder for MockProofOfWorkManager.
type MockProofOfWorkManagerMockRecorder struct {
	mock *MockProofOfWorkManager
}

// NewMockProofOfWorkManager creates a new mock instance.
func NewMockProofOfWorkManager(ctrl *gomock.Controller) *MockProofOfWorkManager {
	mock := &MockProofOfWorkManager{ctrl: ctrl}
	mock.recorder = &MockProofOfWorkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProofOfWorkManager) EXPECT() *MockProofOfWorkManagerMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockProofOfWorkManager) GenerateChallenge(difficulty int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", difficulty)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockProofOfWorkManagerMockRecorder) GenerateChallenge(difficulty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockProofOfWorkManager)(nil).GenerateChallenge), difficulty)
}

// SolveChallenge mocks base method.
func (m *MockProofOfWorkManager) SolveChallenge(challenge string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolveChallenge", challenge)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SolveChallenge indicates an expected call of SolveChallenge.
func (mr *MockProofOfWorkManagerMockRecorder) SolveChallenge(challenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolveChallenge", reflect.TypeOf((*MockProofOfWorkManager)(nil).SolveChallenge), challenge)
}

// VerifySolution mocks base method.
func (m *MockProofOfWorkManager) VerifySolution(challenge string, nonce int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySolution", challenge, nonce)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySolution indicates an expected call of VerifySolution.
func (mr *MockProofOfWorkManagerMockRecorder) VerifySolution(challenge, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySolution", reflect.TypeOf((*MockProofOfWorkManager)(nil).VerifySolution), challenge, nonce)
}
